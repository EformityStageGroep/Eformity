@using System.Text.Json
@model ParentViewModel
@{
 var tenant_id = @User.FindFirst("http://schemas.microsoft.com/identity/claims/tenantid")?.Value;
 var user_id = @User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
}


<div class="border-gray-200 pb-5 mb-3 border-b sm:flex sm:items-center sm:justify-between">
    <div class="flex">
       
        <h3 class="text-gray-900 mr-3 mt-1 text-base font-semibold leading-6">Teams</h3>
        <button id="createTeamModalButton" onclick="openModal()" type="button" class="bg-indigo-600 p-2 text-white rounded-full shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
            <svg  class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />
            </svg>
        </button>
    </div>
    <div class="mt-3 sm:ml-4 sm:mt-0">
        <label for="mobile-search-candidate" class="sr-only">Search</label>
        <label for="desktop-search-candidate" class="sr-only">Search</label>
        <div class="flex rounded-md shadow-sm">
            <div class="relative flex-grow focus-within:z-10">
                <div class="inset-y-0 left-0 pl-3 pointer-events-none absolute flex items-center">
                    <svg class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
                    </svg>
                </div>
                <input type="text" name="mobile-search-candidate" id="mobile-search-candidate" class="py-1.5 pl-10 text-gray-900 ring-gray-300 block w-full rounded-none rounded-l-md border-0 ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:hidden" placeholder="Search">
                <input type="text" name="desktop-search-candidate" id="desktop-search-candidate" class="py-1.5 pl-10 text-gray-900 ring-gray-300 hidden w-full rounded-none rounded-l-md border-0 text-sm leading-6 ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:block" placeholder="Search Teams">
            </div>
            <button type="button" class="-ml-px gap-x-1.5 px-3 py-2 text-gray-900 ring-gray-300 relative inline-flex items-center rounded-r-md text-sm font-semibold ring-1 ring-inset hover:bg-gray-50">
                <svg class="-ml-0.5 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M2 3.75A.75.75 0 012.75 3h11.5a.75.75 0 010 1.5H2.75A.75.75 0 012 3.75zM2 7.5a.75.75 0 01.75-.75h6.365a.75.75 0 010 1.5H2.75A.75.75 0 012 7.5zM14 7a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02l-1.95-2.1v6.59a.75.75 0 01-1.5 0V9.66l-1.95 2.1a.75.75 0 11-1.1-1.02l3.25-3.5A.75.75 0 0114 7zM2 11.25a.75.75 0 01.75-.75H7A.75.75 0 017 12H2.75a.75.75 0 01-.75-.75z" clip-rule="evenodd" />
                </svg>
                Sort
                <svg class="-mr-1 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
    </div>
</div>

 @{
    var userIdLists = new Dictionary<string, List<string>>();

    <ul role="list" class="mt-3 gap-5 grid grid-cols-1 sm:grid-cols-2 sm:gap-5 lg:grid-cols-3 xl:grid-cols-4">

                @foreach (var team in Model.Teams)
    {
         var userIdList = new List<string>();
        userIdLists[$"userIdList_{team.id}"] = userIdList;

        // Define the list of Tailwind background color classes
        List<string> colors = new List<string> { "bg-red-500", "bg-green-500", "bg-blue-500", "bg-yellow-500", "bg-indigo-700" };
        Random rand = new Random();
        
        // Function to get a random background color class
        string selectedColor = colors[rand.Next(colors.Count)];

        string input = team.title;
        string initials = GetFirstLettersOfFirstTwoWords(input).ToLower();

        string GetFirstLettersOfFirstTwoWords(string input)
        {
            // Split the input string into words based on spaces.
            var words = input.Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

            if (words.Length < 1)
            {
                throw new ArgumentException("The input string must contain at least one word.");
            }

            // If there's only one word, return the first two letters of that word.
            if (words.Length == 1)
            {
                return words[0].Substring(0, Math.Min(2, words[0].Length));
            }

            // If there are at least two words, build the result string by taking the first letter of each.
            string initialsVar = words[0][0] + words[1].Substring(0, 1);
            return initialsVar;
        }

                    <div id="slideoverDiv_@team.id">
                        <div data-prefix="slideover" id="slideoverModal_@team.id" class="invisible relative z-50 transition-all duration-300 ease-out" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
                            <div class="inset-0 absolute overflow-hidden">
                                <div class="inset-y-0 right-0 pl-10 active pointer-events-none fixed flex h-auto max-w-full drop-shadow-2xl sm:pl-16">
                                    <!-- Your content here -->
                                    <div class="pointer-events-auto w-screen max-w-2xl transition-all duration-500 ease-in">
                                        <div id="slideover_@team.id" class="bg-white py-6 flex h-full translate-x-full flex-col overflow-y-scroll shadow-xl transition-all duration-500 ease-in">
                                            <div class="px-4 sm:px-6">
                                                <div class="flex items-start justify-between">
                                                    <div class="flex">
                                                        <h2 class="text-gray-900 text-base font-semibold leading-6" id="slide-over-title_@team.id">Editing: @team.title</h2>
                                                        <div class="ml-3 flex items-center">
                                                        </div>
                                                    </div>
                                                    <button onclick="toggleSlideover('@team.id')" type="button" class="p-1 bg-white text-gray-400 font-sm h-0 relative cursor-pointer rounded-md text-xs hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                                                        <span class="-inset-2.5 absolute"></span>
                                                        <span class="sr-only">Close panel</span>
                                                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                                        </svg>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="mt-6 px-4 relative flex-1 sm:px-6">
                                            

        <form id="Team_Edit_Leave" action="@Url.Action("EditTeam", "Teams", new { user_id = user_id })" method="POST">
            <div class="form-group">
                <label asp-for="@team.title" class="control-label"></label>
                <input asp-for="@team.title" class="p-2 py-1.5 text-gray-900 ring-gray-300 block w-full rounded-md border-0 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
                <span asp-validation-for="@team.title" class="text-danger"></span>
            </div>

            <input type="hidden" asp-for="@team.id" />
            <input type="hidden" asp-for="@team.tenant_id" />
            <input type="hidden" asp-for="@team.Users_Teams" />

            <div class="h-19 mx-auto flex w-full flex-col items-center">
                <div class="w-full">
                    <div class="relative flex flex-col items-center">
                        <div id="inputFieldSlideover_@team.id" class="svelte-1l8159u w-full">
                            <div class="my-2 p-1 border-gray-200 bg-white svelte-1l8159u round mt-1 py-2 px-3 border-gray-300 bg-white block flex w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <div class="flex flex-auto flex-wrap">
                                    @{
                            Guid specificTeamId = team.id;
                            var specificTeam = Model.TeamsList.FirstOrDefault(t => t.id == specificTeamId);
                            Console.WriteLine(specificTeamId);
                            Console.WriteLine(specificTeam);
                          
                                    }

                                    <h1>@team.id</h1>
                                    
                                    @foreach (var user in Model.Users)
                            {
                                
                                var userInSpecificTeam = specificTeam.Users_Teams.Any(ut => ut.User.id == user.id);
                                        <div id="userClickedSlideover_@user.id@team.id" class="m-1 py-1 px-2 bg-white text-white bg-indigo-700 border-indigo-700 users-center flex justify-center rounded-full border font-medium @(userInSpecificTeam ? "" : "hidden")">
                                            <div class="flex-initborder-gray-100 w-full max-w-full cursor-pointer rounded-t border-b text-xs font-normal leading-none hover:bg-teal-100ial">@user.fullname</div>
                                            <div class="flex flex-auto flex-row-reverse">
                                                <div>
                                                    <svg id="removeNameButtonSlideover_@user.id" onclick="removeNameFunctionSlideover('@user.id', '@team.id')" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x w-4 h-4 ml-2 cursor-pointer rounded-full hover:text-gray-300">
                                                        <line x1="18" y1="6" x2="6" y2="18"></line>
                                                        <line x1="6" y1="6" x2="18" y2="18"></line>
                                                    </svg>
                                                </div>
                                            </div>
                                        </div>

                                if (userInSpecificTeam)
                                {
                                    string userIdString = user.id.ToString();
                                    if (!userIdList.Contains(userIdString))
                                    {
                                        <script>console.log('put userid in')</script>
                                        userIdList.Add(userIdString);
                                    }
                                }
                            }
                                    <div class="flex-1">
                                        <input id="filterInputSlideover" placeholder="" class="bg-transparent p-1 px-2 text-gray-800 h-full w-full appearance-none outline-none">
                                    </div>
                                </div>
                                <div id="userlistButtonSlideover" onclick="clickUserlistButtonSlideover('@team.id')" class="text-gray-300 w-8 py-1 pl-2 pr-1 border-gray-200 svelte-1l8159u flex items-center border-l">
                                    <button type="button" class="w-6 h-6 text-gray-600 cursor-pointer outline-none focus:outline-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-up w-4 h-4">
                                            <polyline points="18 15 12 9 6 15"></polyline>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div id="userListSlideover_@team.id" class="top-100 bg-white lef-0 max-h-select svelte-5uyqqj absolute z-40 hidden w-full overflow-y-auto rounded shadow">
                            <div class="flex w-full flex-col">
                                <label for="user_id2" class="text-gray-700 block text-sm font-medium">Add Team Members</label>


                                @foreach (var item in Model.Users)
                        {
                            var userInSpecificTeam = specificTeam.Users_Teams.Any(ut => ut.User.id == item.id);

                                                                    <div id="userSlideover_@item.id@team.id" onclick="userClickedSlideover('@item.id', '@team.id')" class="p-2 pl-2 border-blue-700 relative flex w-full items-center border-l-2 hover:bg-indigo-700 hover:text-white hover:cursor-pointer @(userInSpecificTeam ? "" : "border-transparent")">
                                        <div id="userBorderSlideover_@item.id" class="p-2 pl-2 border-transparent relative flex w-full items-center border-l-2 hover:border-indigo-700">
                                            <div class="flex w-full items-center">
                                                <div class="mx-2 leading-6">@item.fullname</div>
                                            </div>
                                            <p>@item.email</p>
                                        </div>
                                    </div>
                        }
                                                            @{

                                    var userIdValue = String.Join(",", userIdLists[$"userIdList_{team.id}"]);
                                    Console.WriteLine("User list: " + userIdValue);
                                    }
                                <input type="hidden" name="user_id2" value="@userIdValue" id="user_id2" class="mt-1 py-2 px-3 border-gray-300 bg-white block w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">

                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group right-0 mt-4 mb-4 mr-4 fixed">
                <button type="submit" class="m1 auto bg-indigo-500 px-3.5 py-2.5 text-white rounded-md text-sm font-semibold shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500">Save</button>
                <button type="button" onclick="submitForm('/Teams/LeaveTeam', '@user_id', '@team.id')" class="m1 auto bg-indigo-500 px-3.5 py-2.5 text-white rounded-md text-sm font-semibold shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500">Leave Team</button>
            </div>
        </form>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <script>
                            function submitForm(action, userId, teamId) {
                                var form = document.getElementById('Team_Edit_Leave');
                                form.action = `${action}?user_id=${userId}&team_id=${teamId}`;
                                console.log(form.action);
                                form.submit(form.action);

                            }
                        </script>
                        <li class="col-span-1 flex rounded-md shadow-sm">
                            <div id="@team.id" class="w-16 h-16 text-white team-element text-md flex items-center justify-center rounded-l-md text-sm font-medium">
                                    @initials
                            </div>
                            <div class="border-gray-200 bg-white flex flex-1 items-center justify-between truncate rounded-r-md border-b border-r border-t">
                                <div class="px-4 py-2 flex-1 truncate text-sm">
                                    <a href="#" class="text-gray-900 font-medium hover:text-gray-600">@team.title</a>
                                <p class="text-gray-500"></p>
                                </div>
                                <div class="pr-2 flex-shrink-0">
                                        <button type="button" class="h-8 w-8 bg-transparent bg-white text-gray-400 inline-flex items-center justify-center rounded-full hover:text-gray-500 focus:outline-none">
                                        <span class="sr-only">Open options</span>
                                        <svg onclick="toggleSlideover('@team.id')" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path d="M10 3a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM10 8.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM11.5 15.5a1.5 1.5 0 10-3 0 1.5 1.5 0 003 0z" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </li>
                    </div>
    }
    </ul>

    <div id="createTeamModal" class="inset-0 fixed z-50 flex hidden items-center justify-center overflow-y-auto">
                <div class="inset-0 fixed transition-opacity" aria-hidden="true">
                    <div class="inset-0 bg-gray-500 absolute opacity-75"></div>
                </div>
                <div class="bg-white transform overflow-visible rounded-md shadow-xl transition-all sm:max-w-lg sm:w-full">
                    <div class="bg-white px-4 pt-5 pb-4 rounded-md sm:p-6 sm:pb-4">
                        <div class="sm:flex sm:items-start">
                            <div class="mt-3 w-full text-center sm:mt-0 sm:ml-4 sm:text-left">
                                <h3 class="text-gray-900 text-lg font-medium leading-6" id="modalTitle">
                                    Create a Team
                                </h3>
                                <form asp-action="CreateTeam">
                                    <div class="mt-2 mb-2">
                                        <label for="title" class="text-gray-700 block text-sm font-medium">Team title</label>
                                        <input type="text" name="title" id="title" class="mt-1 py-2 px-3 border-gray-300 bg-white block w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                    </div>
                                    <div class="mt-2 mb-2">
                                        <label for="tenant_id" class="text-gray-700 block text-sm font-medium"></label>

                                        <input type="hidden" value="@tenant_id" name="tenant_id" id="tenant_id" class="mt-1 py-2 px-3 border-gray-300 bg-white block w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                    </div>
                                    <div class="mt-2 mb-2">
                                        <label for="Users_Teams" class="text-gray-700 block text-sm font-medium"></label>
                                        <input type="hidden" name="Users_Teams" id="Users_Teams" class="mt-1 py-2 px-3 border-gray-300 bg-white block w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">

                                    </div>
                                    <label for="user_id" class="text-gray-700 block text-sm font-medium">Add Team Members</label>
                                            <p class="text-gray-500 text-sm">Pick the members you want to be in this team.</p>
                                            @Html.Partial("../Teams/teamMultiSelect")
                                    <input type="hidden" name="user_id" value="" id="user_id" class="mt-1 py-2 px-3 border-gray-300 bg-white block w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">

                                    <div class="py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                                        <button id="closeModalButton" onclick="closeCreateTeamModal()" type="button" class="border-transparent px-4 py-2 bg-indigo-600 text-white inline-flex w-full justify-center rounded-md border text-base font-medium shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                                            Close
                                        </button>
                                        <div class="py-1"></div>
                                        <button id="createTeamButton" type="submit"  class="border-transparent px-4 py-2 bg-indigo-600 text-white inline-flex w-full justify-center rounded-md border text-base font-medium shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                                            Create Team
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
    </div>
    var userIdListsJson = JsonSerializer.Serialize(userIdLists);

}



@section scripts{

<script>

        var userIdLists = @Html.Raw(userIdListsJson);
        console.log(userIdLists);

        // Initialize an empty array to hold all user IDs
        var allUserIds = [];

        // Iterate over each key in the object
        for (var key in userIdLists) {
            if (userIdLists.hasOwnProperty(key)) {
                // Concatenate the arrays into allUserIds
                allUserIds = allUserIds.concat(userIdLists[key]);
            }
        }

        // Join all user IDs into a single string
        var userIdString = allUserIds.join(',');

        // Set the value of the input field
        document.addEventListener('DOMContentLoaded', (event) => {
            document.getElementById('user_id').value = userIdString;
        });

    function updateTeam() {
        setTimeout(() => {
            location.reload();
        }, 300); // 1000 milliseconds = 1 second
    }
    function toggleSlideover(teamId) {
            Thisteamid = "12"


        document.getElementById("slideoverModal_" + teamId).classList.toggle('invisible');
        document.getElementById("slideover_" + teamId).classList.toggle('translate-x-full');
   
    }

    function closeCreateTeamModal() {
        closeModalButton = document.getElementById('closeModalbutton')
        modal = document.getElementById('createTeamModal')
        modal.classList.add('hidden')
    }

    function openModal() {
        modalButton = document.getElementById('createTeamModalButton')
        modal = document.getElementById('createTeamModal')
        modal.classList.remove('hidden')
    }

    // Define the list of Tailwind background color classes
    const colors = ['bg-red-500', 'bg-green-500', 'bg-blue-500', 'bg-yellow-500', 'bg-indigo-700'];

    // Function to generate a random background color
    function generateRandomColor() {
        return colors[Math.floor(Math.random() * colors.length)];
    }

    // Function to get or set the color for a team element
    function getOrSetColorForTeam(teamElement) {
        // Use the unique ID or data attribute of the team element as the key
        const teamId = teamElement.id; // In your case, the ID of the team element
        if (!teamId) {
            return;
        }

        // Check if there is a stored color in localStorage for this team
        let teamColor = localStorage.getItem(`teamColor-${teamId}`);

        // If there's no stored color, generate a new random color
        if (!teamColor) {
            teamColor = generateRandomColor();
            // Store the new color in localStorage
            localStorage.setItem(`teamColor-${teamId}`, teamColor);
        }
        // Apply the color to the team element
        // Remove existing background color classes
        colors.forEach(colorClass => {
            teamElement.classList.remove(colorClass);
        });
        // Add the new color class
        teamElement.classList.add(teamColor);
    }

    // Function to apply colors to all team elements
    function applyColorsToTeams() {
        // Get all team elements
        const teamElements = document.querySelectorAll('.team-element');

        // Apply a color to each team element
        teamElements.forEach(teamElement => {
            getOrSetColorForTeam(teamElement);
        });
    }

    // Call the function to apply colors to all team elements when the page loads
    window.onload = applyColorsToTeams();
     //let clickedNamesListSlideover = [];//
        window.addEventListener('click', function (event) {
            const userListButton = document.getElementById('userlistButtonSlideover');
            const userList = document.getElementById('userListSlideover');
            const inputField = document.getElementById('inputFieldSlideover');

        });

        document.addEventListener('DOMContentLoaded', function () {
            const filterInput = document.getElementById('filterInputSlideover');
            const userList = document.getElementById('userListSlideover');


            filterInput.addEventListener('keyup', function () {
                const searchText = filterInput.value.toLowerCase();
                Array.from(users).forEach(function (user) {
                    const userName = user.textContent || user.innerText;
                    if (userName.toLowerCase().indexOf(searchText) > -1) {
                        user.style.display = "";
                    } else {
                        user.style.display = "none";
                    }
                });
            });
        });

        function removeNameFunctionSlideover(userId, teamId) {
            const userClickedBorderId = 'userBorderSlideover_' + userId + teamId;
            const userListId = document.getElementById('userClickedSlideover_' + userId + teamId);
            const userClickedBorder = document.getElementById(userClickedBorderId);
            const userNameList = document.getElementById('userSlideover_' + userId + teamId);

            // Hide the user list item and make the border transparent
            userListId.classList.add('hidden');
            userNameList.classList.add('border-transparent');

            // Remove the user ID from the list in the global userIdLists object
            const listKey = `userIdList_${teamId}`;
            if (userIdLists[listKey]) {
                userIdLists[listKey] = userIdLists[listKey].filter(id => id !== userId);
            }

            console.log(userIdLists);
        }

        function updateClickedUsersDisplay() {
            const displayElement = document.getElementById('clickedUsersList');
            displayElement.innerHTML = '';
            clickedNamesListSlideover.forEach(userId => {
                const userElement = document.createElement('li');
                userElement.textContent = 'User ID: ' + userId;
                displayElement.appendChild(userElement);
            });
            console.log("Updated user list display.");
        }

        function userClickedSlideover(userId, teamId, list) {
            console.log('this is the current user list: '+list)
    var userNameList = document.getElementById('userSlideover_' + userId + teamId);
    var blueNameTag = document.getElementById('userClickedSlideover_' + userId + teamId);
    console.log('bluenametag: ' + blueNameTag.classList);

    var listKey = `userIdList_${teamId}`;

    if (!userIdLists[listKey]) {
        userIdLists[listKey] = [];
    }

    if (blueNameTag.classList.contains('hidden')) {
        blueNameTag.classList.remove('hidden');
        userNameList.classList.remove('border-transparent');

        // Add userId to the list if not already present
        if (!userIdLists[listKey].includes(userId)) {
            userIdLists[listKey].push(userId);
        }
    } else {
        blueNameTag.classList.add('hidden');
        userNameList.classList.add('border-transparent');

        // Remove userId from the list if present
        userIdLists[listKey] = userIdLists[listKey].filter(id => id !== userId);
    }

    console.log(userIdLists);

    document.getElementById("user_id").value = clickedNamesListSlideover.join(',');
    updateClickedUsersDisplay();
}




        function clickUserlistButtonSlideover(Teamid) {


            button = document.getElementById("userlistButtonSlideover_" + Teamid);
            userList1 = document.getElementById("userListSlideover_" + Teamid);
            console.log(userList1);
            userList1.classList.toggle("hidden");
       
        }
</script>
}