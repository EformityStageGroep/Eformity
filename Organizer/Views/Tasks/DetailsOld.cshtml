@model List<Organizer.Entities.Task>

@Html.Partial("../Home/Homepage")


@foreach (var task in Model)
{



    <div id="slideoverModal_@task.Id" class="invisible relative z-50 transition-all duration-300 ease-out" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">


        <div class="inset-0 absolute overflow-hidden">
            <div class="inset-y-0 right-0 pl-10 active pointer-events-none fixed flex h-auto max-w-full drop-shadow-2xl sm:pl-16">
                <!-- Your content here -->
                <div class="pointer-events-auto w-screen max-w-2xl transition-all duration-500 ease-in">
                    <div id="slideover_@task.Id" class="bg-white py-6 flex h-full translate-x-full flex-col overflow-y-scroll shadow-xl transition-all duration-500 ease-in">
                        <div class="px-4 sm:px-6">
                            <div class="flex items-start justify-between">
                                <h2 class="text-gray-900 text-base font-semibold leading-6" id="slide-over-title_@task.Id">Editing: @task.Title</h2>
                                <div class="ml-3 h-7 flex items-center">
                                    <button onclick="toggleSlideover('@task.Id')" type="button" class="bg-white text-gray-400 relative cursor-pointer rounded-md hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                                        <span class="-inset-2.5 absolute"></span>
                                        <span class="sr-only">Close panel</span>
                                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="mt-6 px-4 relative flex-1 sm:px-6">


                      


                            <form asp-action="EditTask" asp-route-id="@task.Id">
                                 <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <input type="hidden" asp-for="@task.Id" />
                            <div class="form-group">
                                <label asp-for="@task.Title" class="control-label"></label>
                                    <input asp-for="@task.Title" class="p-2 py-1.5 text-gray-900 ring-gray-300 block w-full rounded-md border-0 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="Send e-mails to the customers" value="@task.Title">
                                    
                                    <span asp-validation-for="@task.Title" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="@task.Description" class="control-label"></label>
                                    <input asp-for="@task.Description" class="p-2 py-1.5 text-gray-900 ring-gray-300 block w-full rounded-md border-0 shadow-sm ring-1 ring-inset placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="Put James in the CC!">
   
                                    <span asp-validation-for="@task.Description" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="@task.Priority" class="control-label"></label>
                                    <select asp-for="@task.Priority" class="mt-1 py-2 px-3 border-gray-300 bg-white block w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <option value="high">High</option>
                                        <option value="medium">Medium</option>
                                        <option value="low">Low</option>
                                    </select>
                                    <span asp-validation-for="@task.Priority" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="@task.DateTime" class="control-label"></label>
                                    <input asp-for="@task.DateTime" class="mt-1 py-2 px-3 border-gray-300 bg-white block w-full rounded-md border shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">

                                    <span asp-validation-for="@task.DateTime" class="text-danger"></span>
                                </div>
                                <div class="form-group right-0 mt-4 mb-4 mr-4 fixed">
                                    <input type="submit" value="Save" class="m1 auto bg-indigo-500 px-3.5 py-2.5 text-white rounded-md text-sm font-semibold shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500" onclick="updateTask('@task.Id')">
                                    <button type="button" class="m1 auto bg-indigo-500 px-3.5 py-2.5 text-white rounded-md text-sm font-semibold shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500" onclick="deleteTask('@task.Id')">Delete</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


 
}
@section scripts {
<script>

    function filterTasksByPriority(priority) {
        var tasks = document.querySelectorAll('[id^="postit_"]');
        tasks.forEach(function (task) {
            var taskId = task.id.split("_")[1]; // Extracting task ID from element ID
            var priorityLabel = document.getElementById('priorityLabel_' + taskId).innerText.trim();
            if (priority === "ALL" || priorityLabel === priority) {
                task.style.display = 'block'; // Show the task if priority matches or if "ALL" is selected
            } else {
                task.style.display = 'none'; // Hide the task if priority does not match and "ALL" is not selected
            }
        });
    }

        function toggleDescription(taskId) {
            const postit = document.getElementById("postit_" + taskId)
            const descriptionText = document.getElementById("descriptionText_" + taskId)

            if (descriptionText.classList.contains('hidden')) {
                descriptionText.classList.remove('hidden');

            }
            else {
                descriptionText.classList.add('hidden')

            }






        }

 

        function toggleSlideover(taskId) {
            document.getElementById("slideoverModal_" + taskId).classList.toggle('invisible');
            document.getElementById("slideover_" + taskId).classList.toggle('translate-x-full');
            console.log(taskId);
        }

    function deleteTask(taskId) {
        // Get the CSRF token from the form
        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Send a POST request with the task ID and CSRF token
        fetch(`/Tasks/Delete/${taskId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': csrfToken // Include CSRF token in the headers
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to delete task');
                }
                return response.json();
            })
            .then(data => {
                // Task deleted successfully, you can perform any necessary actions (e.g., hide task element)
                // For simplicity, let's reload the page
                location.reload();
            })
            .catch(error => {
                console.error('Error deleting task:', error);
                // Handle error scenario
            });
    setTimeout(() => {
        location.reload();
    }, 500);
    }



    document.addEventListener("DOMContentLoaded", function (taskId) {
        const tabs = document.querySelectorAll(".tab");
        const tabContents = document.querySelectorAll("#tab-content > div");

        tabs.forEach((tab, index) => {
            tab.addEventListener("click", function (event) {
                event.preventDefault();

                // Remove active class from all tabs and add default styling
                tabs.forEach(tab => {
                    tab.classList.remove("border-indigo-500", "text-indigo-600");
                    tab.classList.add("border-transparent", "text-gray-500", "hover:border-gray-300", "hover:text-gray-700");
                });

                // Add active styling to clicked tab
                tab.classList.remove("border-transparent", "text-gray-500", "hover:border-gray-300", "hover:text-gray-700");
                tab.classList.add("border-indigo-500", "text-indigo-600");

                // Hide all tab contents
                tabContents.forEach(content => content.classList.add("hidden"));
                // Show corresponding tab content
                tabContents[index].classList.remove("hidden");
            });
        });

        const openModalButton = document.getElementById("openModalButton");
        const modal = document.getElementById("modal");
        const closeModalButton = document.getElementById("closeModalButton");

        openModalButton.addEventListener("click", function () {
            modal.classList.remove("hidden");
            modal.classList.add("flex");
            console.log("test");
        });

        closeModalButton.addEventListener("click", function () {
            modal.classList.remove("flex");
            modal.classList.add("hidden");
        });

        const createTaskButton = document.getElementById("createTaskButton");
        const taskForm = document.getElementById("taskForm");

        createTaskButton.addEventListener("click", function () {
            const formData = new FormData(taskForm);

            fetch('@Url.Action("Create", "Tasks")', {
                method: 'POST',
                body: formData,
             
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data); // Log response data
                    // Optionally, you can update the UI or display a success message
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    // Optionally, you can display an error message to the user
                });
            setTimeout(() => {
                location.reload();
            }, 500);
        });

    });
    
    function updateTask(taskId) {
            var form = document.getElementById('editTaskForm');
        // Get the form data
            const formData = new FormData(form);
        console.log(formData);
        // Send a POST request with the task ID and form data
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Send a POST request with the task ID and CSRF token
            fetch(`/Tasks/EditTask/${taskId}`, {
                method: 'POST',
                body: formData,
               
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to update task');
                    }
                    return response.json();
                })
                .then(data => {
                    // Task updated successfully, you can perform any necessary actions
                    // For simplicity, let's reload the page after 1 second
                    setTimeout(() => {
                        location.reload();
                    }, 500); // 1000 milliseconds = 1 second
                })
                .catch(error => {
                    console.error('Error updating task:', error);
                    // Handle error scenario
                });
        
          
    }
  

</script>
}