@model Organizer.Entities.Task
<link rel="stylesheet" href="../Views/Home/postitAnimation.css">

<div id="slideoverModal" class="relative z-10 duration-300 ease-out  transition-all invisible" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">

    <div class="absolute inset-0 overflow-hidden">
        <div class="pointer-events-none fixed inset-y-0 right-0 flex max-w-full h-auto pl-10 sm:pl-16 drop-shadow-2xl active">
            <!-- Your content here -->
            <div id="postit_@Model.Id" class="transition-all ease-in-out duration-150 text-white bg-white rounded-xl max-w-md min-w-40 mx-auto bg-white overflow-hidden p-2 flex items-center hover:bg-gray-100 hover:rounded-xl cursor-pointer">
                <div class="w-fit h-fit">
                    <div class="inline-flex items-center">
                        <label class="relative flex items-center p-3 rounded-full cursor-pointer" htmlFor="custom">
                            <input id="checkbox_@Model.Id"
                                   onclick="checkmarkClick(event, '@Model.Id'); makeGreen('@Model.Id')"
                                   type="checkbox"
                                   class="peer relative appearance-none w-5 h-5 border rounded-md border-blue-gray-200 cursor-pointer transition-all before:content[''] before:block before:bg-blue-gray-500 before:w-12 before:h-12 before:rounded-full before:absolute before:top-2/4 before:left-2/4 before:-translate-y-2/4 before:-translate-x-2/4 before:opacity-0 hover:before:opacity-10 before:transition-opacity checked:bg-white checked:border-white checked:before:bg-white" />
                            <span class="absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100">
                                <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M13.2667 0.534432C12.9576 0.334203 12.5817 0.264801 12.2215 0.341463C11.8613 0.418125 11.5463 0.634586 11.3456 0.943321L5.29778 10.265L2.50389 7.68165C2.37051 7.55496 2.21328 7.45603 2.04134 7.39061C1.86941 7.32518 1.68619 7.29457 1.50232 7.30054C1.31845 7.30651 1.1376 7.34895 0.970275 7.42539C0.802945 7.50183 0.652469 7.61075 0.527583 7.74583C0.402697 7.88091 0.30589 8.03945 0.242784 8.21225C0.179678 8.38505 0.151529 8.56867 0.159972 8.75244C0.168415 8.93621 0.213283 9.11647 0.291968 9.28276C0.370654 9.44904 0.481591 9.59804 0.618337 9.7211L4.62334 13.4244C4.89 13.6717 5.22889 13.7939 5.56556 13.7939C5.93945 13.7939 6.41778 13.6372 6.73167 13.1611C6.91611 12.88 13.6761 2.45554 13.6761 2.45554C13.7754 2.30252 13.8435 2.13144 13.8767 1.95208C13.9098 1.77271 13.9073 1.58858 13.8693 1.41018C13.8313 1.23179 13.7585 1.06263 13.6551 0.912371C13.5517 0.762109 13.4197 0.633685 13.2667 0.534432Z" fill="rgb(21 128 61)" />
                                </svg>
                            </span>
                        </label>
                    </div>
                </div>
                <div class="flex flex-col items-start justify-center">
                    <div class="flex items-center">
                        <h1 class="font-semibold cursor-pointer font-size-2 text-black">@Model.Title</h1>
                        <p class="ml-3 border border-solid border-@GetPriorityColor(Model.Priority) text-@GetPriorityColor(Model.Priority) rounded-lg p-1 font-medium text-xs border h-6.5">@Model.Priority</p>
                    </div>
                    <div class="flex items-center">
                        <p class="text-zinc-700 font-light">@Model.Description</p>
                        <p class="text-blue-500"> ☀️ @Model.DateTime.ToShortDateString(), ⏰ @Model.DateTime.ToShortTimeString()</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @functions {
        string GetPriorityColor(string priority)
        {
            switch (priority)
            {
                case "LOW":
                    return "green-500";
                case "MEDIUM":
                    return "yellow-500";
                case "HIGH":
                    return "red-500";
                default:
                    return "gray-500";
            }
        }
    }

    <script>
        function makeGreen(taskId) {
            const postitTitle = document.getElementById("postit_" + taskId);
            const checkboxPostit = document.getElementById("checkbox_" + taskId);

            if (checkboxPostit.checked) {
                postitTitle.classList.remove("hover:bg-gray-100", "bg-white");
                postitTitle.classList.add("hover:bg-green-600", "bg-green-700");
            } else {
                postitTitle.classList.remove("hover:bg-green-700", "hover:bg-green-600");
                postitTitle.classList.add("hover:bg-gray-100", "bg-white");
            }
        }

        function checkmarkClick(event, taskId) {
            event.stopPropagation();
        }
    </script>
</div>
